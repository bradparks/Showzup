using System.Collections;
using System.Linq;
using Heetoo.Presentation.Services;
using Heetoo.Presentation.Views;
using JetBrains.Annotations;
using UniRx;
using UnityEngine;
using Zenject;

namespace Heetoo.Present
{
    public class ListControl : Control
    {
        [Inject]
<<<<<<< HEAD:Heetoo.CES/Assets/Plugins/Heetoo/Presentation/Controls/ListControl.cs
        protected IViewLoaderService ViewLoaderService { get; set; }
=======
        internal IViewLoader ViewLoader { get; set; }
>>>>>>> origin/master:Heetoo.CES/Assets/Plugins/Heetoo/Present/Controls/ListControl.cs

        public bool SizeToContent;
        public GameObject Container;
        public string[] Variants;

        [Pure]
        public IObservable<Unit> SetItems(IEnumerable items, Options options = null)
        {
            RemoveAllViews(Container);

            return LoadViews(items, options)
                .Do(view => AddView(Container, view))
                .AsSingleUnitObservable();
        }

        [Inject]
        internal void PostInject()
        {
            AssertPropertyNotNull(Container, nameof(Container));
            RemoveAllViews(Container);
        }

<<<<<<< HEAD:Heetoo.CES/Assets/Plugins/Heetoo/Presentation/Controls/ListControl.cs
        protected IObservable<IView> LoadViews(IEnumerable items)
=======
        private IObservable<IView> LoadViews(IEnumerable items, Options options)
>>>>>>> origin/master:Heetoo.CES/Assets/Plugins/Heetoo/Present/Controls/ListControl.cs
        {
            if (items == null)
                return Observable.Empty<IView>();

            return items.Cast<object>().ToObservable()
                .SelectMany(x => ViewLoader.LoadByViewModel(x, options.WithExtraVariants(Variants)));
        }
    }
}